#Importing Data part I
#dir() in order to see the list of files in the directory.
dir()

#Using "swimming_pools.csv"
pools <- read.csv("swimming_pools.csv")
str(pools)

#Strings are treated as characters so we need to use stringsAsFactors = FALSE
pools <- read.csv("swimming_pools.csv", stringsAsFactors = FALSE)
str(pools)

#Importing text files .txt - read.delim() has a separator of "\t"(tab) and "header = TRUE" (first row is the variables name)
hotdogs <- read.delim("hotdogs.txt", header = FALSE)
summary(hotdogs)

#For more exotic data we use the read.table()
path <- file.path("data", "hotdogs.txt")
hotdogs <- read.table("path", sep = "", col.names = c("types", "calories", "sodium"))
head(hotdogs)

#Selecting certain data
hotdogs <- read.delim("hotdogs.txt", header = FALSE, col.names = c("types", "calories", "sodium"))
lily <- hotdogs[which.min(hotdogs$calories), ]
tom <- hotdogs[which.max(hotdogs$sodium), ]

#There we can also select the colClasses
hotdogs2 <- read.delim("hotdogs.txt", header = FALSE, col.names = c("types", "calories", "sodium"), colClasses = c("factor", "NULL", "numeric"))
str(hotdogs2)

#readr package is more simplier and powerful than utils package.
#read.table() = read_delim() ; read.csv() = read_csv() ; read.delim() = read_tsv() "tsv = tab separeted values"
install.packages("readr")
library(readr)
potatoes <- read_csv("potatoes.csv")

#Using read_tsv()
properties <- c("area", "temp", "size", "storage", "method", "texture", "flavor", "moistness")
potatoes <- read_tsv("potates.txt", col_names = properties)
head(potatoes)

#Using read_delim() we can use "col_names = FALSE" "col_types = cdil_" (c = character, d = double, i = integer, l = logical, _ = skip)
properties <- c("area", "temp", "size", "storage", "method", "texture", "flavor", "moistness")
potatoes <- read_delim("potates.txt", delim = "\t", col_names = properties)
potatoes

#Using read_delim() with skip (skips data form the start) and n_max (shows the amount of lines to import)
potatoes_fragment <- read_delim("potates.txt", delim = "\t", skip = 6, n_max = 5, col_names = properties)
potatoes_fragment

#treating all variables as characters
potatoes_char <- read_tsv("potatoes.txt", col_types = "cccccccc", col_names = properties)

#col_types with collectors this collectors should be used in a list()
hotdogs <- read_tsv("hotdogs.txt", col_names = c("type", "calories", "sodium"))
fac <- col_factors(levels = c("Beef", "Meat", "Poultry"))
int <- col_integer()
hotdogs_factor <- read_tsv("hotdogs.txt", col_names = c("type", "calories", "sodium"), col_types = list(fac, int, int))
summary(hotdogs_factor)

#data.table package
install.packages("data.table")
library(data.table)
potatoes <- fread("potatoes.csv")

#Selecting and droping select = c(1, 3,..) drop = c(2, 4, ...)
potatoes <- fread("potatoes.csv", select = c(6, 8))
plot(potatoes$texture, potatoes$moistness)

#Importing Excel Data. readxl package. excel_sheets() list different sheets; and read_excel() actually import data into R.
install.packages("readxl")
library(readxl)

#excel_sheets() lets you know what sheets are in the file. But it does not imported anything yet.
excel_sheets("urbanpop.xlsx")

#importing an excel sheet.
pop_1 <- read_excel("urbanpop.xlsx", sheet = 1)
pop_2 <- read_excel("urbanpop.xlsx", sheet = 2)
pop_3 <- read_excel("urbanpop.xlsx", sheet = 3)

pop_list <- list(pop_1, pop_2, pop_3)

#Using lapply() for calling multiple sheets
pop_list <- lapply(excel_sheets("urbanpop.xlsx"), read_excel, path = "urbanpop.xlsx")

#Other characteristics of read_excel() you can use col_names = TRUE or FALSE, COl_types =c("text", "date", "numeric", "blank(it ignores this column")
#paste0("year_", 1960:1966) its a shortcut to specify year_1960, year_1961.... year_1966
pop_a <- read_excel("urbanpop_nonames.xlsx", sheet = 1, col_names = FALSE)
cols <- c("country", paste0("year_", 1960:1966)) 
pop_b <- read_excel("urbanpop_nonames.xlsx", sheet = 1, col_names = cols)

#Using skip = a number of rows we want R to drop from the excel sheet.
urbanpop_sel <- read_excel("urbanpop.xlsx", sheet = 2, col_names = FALSE, skip = 21)
urbanpop_sel[1, ]

#gdata package
install.packages("gdata")
library(gdata)
read.xls("cities.xls")
urban_pop <- read.xls("urbanpop.xls", sheet = 2)
head(urban_pop, n = 11)

#all the options available in the utils package can run in the read.xls
urban_pop <- read.xls("urbanpop.xls", sheet = 2, skip = 50, header = FALSE, stringsAsFactors = FALSE, col_names = cols)

#Using cbind() to add the sheets together, na.omit() removes all rows with NA
path <- "urbanpop.xls"
urban_sheet1 <- read.xls(path, sheet = 1, stringsAsFactors = FALSE)
urban_sheet2 <- read.xls(path, sheet = 2, stringsAsFactors = FALSE)
urban_sheet3 <- read.xls(path, sheet = 3, stringsAsFactors =FALSE)

urban <- cbind(urban_sheet1, urban_sheet2[-1], urban_sheet3[-1])
urban_clean <- na.omit(urban)

#XLConnect package lets you work in R with excel data and then return it to excel.
install.packages("XLConnect")
library(XLConnect)
#loadWorkbook() and getSheets() = to excel_sheets(), readWorksheet()
my_book <- loadWorkbook("urbanpop.xlsx")
getSheets(my_book)
readWorksheet(my_book, sheet = 2)

#Selecting columns
urbanpop_sel <- readWorksheet(my_book, sheet = 2, startCol = 3, endCol = 5)
countries <- readWorksheet(my_book, sheet = 2, startCol = 1, endCol = 1)
selection <- cbind(countries, urbanpop_sel)
selection

#Create a spreadsheet in R. createSheet(my_book, "data_summary")
my_book <- loadWorkbook("urbanpop.xlsx")
createSheet(my_book, "data_summary")
getSheets(my_book)

#Saving a spreadsheet in R as a xlsx document.
sheets <- getSheets(my_book)[1:3]
dims <- sapply(sheets, function(x) dim(readWorksheet(my_book, sheet = x)), USE.NAMES = FALSE)
summ <- data.frame(sheets = sheets, nrows = dims[1, ], ncols = dims[2, ])
saveWorkbook(my_book, "summary.xlsx")

#renaming a sheet
renameSheet(my_book, sheet = 4, "summary.xlsx")
getSheets(my_book)
saveWorkbook(my_book, "renamed.xlsx")

#deleting a sheet
my_book <- loadWorkbook("renamed.xlsx")
getSheets(my_book)
removeSheet(my_book, "summary")
saveWorkbook(my_book, "clean.xlsx")

#-----------------------------------------------------
#Importing Data part II
#Databases in R - MySQL = RMySQL; PostgresSQL = RPostgresSQL; Oracle Database = ROracle
install.packages("RMySQL")
library(DBI)

# Edit dbConnect() call
con <- dbConnect(RMySQL::MySQL(), 
                 dbname = "tweater", 
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com", 
                 port = 0000,
                 user = "",
                 password = "datacamp")

# Load the DBI package
library(DBI)

# Connect to the MySQL database: con
con <- dbConnect(RMySQL::MySQL(), 
                 dbname = "tweater", 
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com", 
                 port = 3306,
                 user = "student",
                 password = "datacamp")

# Build a vector of table names: tables
dbListTables(con)
tables <- c(dbListTables(con))
# Display structure of tables
str(tables)

# Load the DBI package
library(DBI)

# Connect to the MySQL database: con
con <- dbConnect(RMySQL::MySQL(), 
                 dbname = "tweater", 
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com", 
                 port = 3306,
                 user = "student",
                 password = "datacamp")

# Import the users table from tweater: users
dbListTables(con)
users <- dbReadTable(con, "users")

# Print users
users

# Load the DBI package
library(DBI)

# Connect to the MySQL database: con
con <- dbConnect(RMySQL::MySQL(), 
                 dbname = "tweater", 
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com", 
                 port = 3306,
                 user = "student",
                 password = "datacamp")

# Get table names
table_names <- dbListTables(con)

# Import all tables
tables <- lapply(table_names, dbReadTable, conn = con)

# Print out tables
tables

# Connect to the database
library(DBI)
con <- dbConnect(RMySQL::MySQL(),
                 dbname = "tweater",
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
                 port = 3306,
                 user = "student",
                 password = "datacamp")

# Import tweat_id column of comments where user_id is 1: elisabeth
elisabeth <- dbGetQuery(con, "SELECT tweat_id FROM comments WHERE user_id = 1")

# Print elisabeth
elisabeth

# Connect to the database
library(DBI)
con <- dbConnect(RMySQL::MySQL(),
                 dbname = "tweater",
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
                 port = 3306,
                 user = "student",
                 password = "datacamp")

# Import post column of tweats where date is higher than '2015-09-21': latest
latest <- dbGetQuery(con, "SELECT post FROM tweats WHERE date > '2015-09-21'")

# Print latest
latest

# Connect to the database
library(DBI)
con <- dbConnect(RMySQL::MySQL(),
                 dbname = "tweater",
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
                 port = 3306,
                 user = "student",
                 password = "datacamp")

# Create data frame specific
specific <- dbGetQuery(con, "SELECT message FROM comments WHERE tweat_id = 77 AND user_id > 4")

# Print specific
specific

# Connect to the database
library(DBI)
con <- dbConnect(RMySQL::MySQL(),
                 dbname = "tweater",
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
                 port = 3306,
                 user = "student",
                 password = "datacamp")

# Create data frame short
short <- dbGetQuery(con, "SELECT id, name FROM users WHERE CHAR_LENGTH(name) < 5")

# Print short
short

# Connect to the database
library(DBI)
con <- dbConnect(RMySQL::MySQL(),
                 dbname = "tweater",
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
                 port = 3306,
                 user = "student",
                 password = "datacamp")

# Send query to the database
res <- dbSendQuery(con, "SELECT * FROM comments WHERE user_id > 4")

# Use dbFetch() twice
dbFetch(res, n = 2)
dbFetch(res)

# Clear res
dbClearResult(res)

# Load RMySQL package
library(DBI)

# Connect to the database
library(DBI)
con <- dbConnect(RMySQL::MySQL(),
                 dbname = "tweater",
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
                 port = 3306,
                 user = "student",
                 password = "datacamp")

# Create the data frame  long_tweats
long_tweats <- dbGetQuery(con, "SELECT post, date FROM tweats WHERE CHAR_LENGTH(post) > 40")

# Print long_tweats
print(long_tweats)

# Disconnect from the database
dbDisconnect(con)

# Load the readr package
library(readr)

# Import the csv file: pools
url_csv <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/swimming_pools.csv"
pools <- read_csv(url_csv)

# Import the txt file: potatoes
url_delim <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/potatoes.txt"
potatoes <- read_tsv(url_delim)

# Print pools and potatoes
pools
potatoes

# https URL to the swimming_pools csv file.
url_csv <- "https://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/swimming_pools.csv"

# Import the file using read.csv(): pools1
pools1 <- read.csv(url_csv)

# Load the readr package
library(readr)

# Import the file using read_csv(): pools2
pools2 <- read_csv(url_csv)

# Print the structure of pools1 and pools2
str(pools1)
str(pools2)

# Load the readxl and gdata package
library(readxl)
library(gdata)

# Specification of url: url_xls
url_xls <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/latitude.xls"

# Import the .xls file with gdata: excel_gdata
excel_gdata <- read.xls(url_xls)

# Download file behind URL, name it local_latitude.xls
download.file(url_xls, destfile = "local_latitude.xls")

# Import the local .xls file with readxl: excel_readxl
excel_readxl <- read_excel("local_latitude.xls")

# https URL to the wine RData file.
url_rdata <- "https://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/wine.RData"

# Download the wine file to your working directory
download.file(url_rdata, destfile = "wine_local.RData")

# Load the wine data into your workspace using load()
load("wine_local.RData")

# Print out the summary of the wine data
summary(wine)

# Load the httr package
library(httr)

# Get the url, save response to resp
url <- "http://www.example.com/"
resp <- GET(url)

# Print resp
resp

# Get the raw content of resp: raw_content
raw_content <- content(resp, as = "raw")

# Print the head of raw_content
head(raw_content)

# httr is already loaded

# Get the url
url <- "http://www.omdbapi.com/?apikey=72bc447a&t=Annie+Hall&y=&plot=short&r=json"
resp <- GET(url)

# Print resp
resp

# Print content of resp as text
content(resp, as = "text")

# Print content of resp
content(resp)

# Load the jsonlite package
library(jsonlite)

# wine_json is a JSON
wine_json <- '{"name":"Chateau Migraine", "year":1997, "alcohol_pct":12.4, "color":"red", "awarded":false}'

# Convert wine_json into a list: wine
wine <- fromJSON(wine_json)

# Print structure of wine
str(wine)

# jsonlite is preloaded

# Definition of quandl_url
quandl_url <- "https://www.quandl.com/api/v3/datasets/WIKI/FB/data.json?auth_token=i83asDsiWUUyfoypkgMz"

# Import Quandl data: quandl_data
quandl_data <- fromJSON(quandl_url)

# Print structure of quandl_data
str(quandl_data)

# The package jsonlite is already loaded

# Definition of the URLs
url_sw4 <- "http://www.omdbapi.com/?apikey=72bc447a&i=tt0076759&r=json"
url_sw3 <- "http://www.omdbapi.com/?apikey=72bc447a&i=tt0121766&r=json"

# Import two URLs with fromJSON(): sw4 and sw3
sw4 <- fromJSON(url_sw4)
sw3 <- fromJSON(url_sw3)

# Print out the Title element of both lists
sw4$Title
sw3$Title

# Is the release year of sw4 later than sw3?
year <- sw4$Year > sw3$Year
year

# jsonlite is already loaded

# Challenge 1
json1 <- '[1, 2, 3, 4, 5, 6]'
fromJSON(json1)

# Challenge 2
json2 <- '{"a": [1, 2, 3], "b":[4, 5, 6]}'
fromJSON(json2)

# jsonlite is already loaded

# URL pointing to the .csv file
url_csv <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/water.csv"

# Import the .csv file located at url_csv
water <- read.csv(url_csv, stringsAsFactors = FALSE)

# Convert the data file according to the requirements
water_json <- toJSON(water)

# Print out water_json
water_json

# jsonlite is already loaded

# Convert mtcars to a pretty JSON: pretty_json
pretty_json <- toJSON(mtcars, pretty = TRUE)

# Print pretty_json
pretty_json

# Minify pretty_json: mini_json
mini_json <- minify(pretty_json)

# Print mini_json
mini_json

# Load the haven package
# SAS: read_sas()
# STATA: read_dta() (or read_stata(), which are identical)
# SPSS: read_sav() or read_por(), depending on the file type.
library(haven)

# Import sales.sas7bdat: sales
sales <- read_sas("sales.sas7bdat")

# Display the structure of sales
str(sales)

# haven is already loaded

# Import the data from the URL: sugar
sugar <- read_stata("http://assets.datacamp.com/production/course_1478/datasets/trade.dta")

# Structure of sugar
str(sugar)
head(sugar)
# Convert values in Date column to dates
sugar$Date <- as.Date(as_factor(sugar$Date))

# Structure of sugar again
str(sugar)

# haven is already loaded

# Import person.sav: traits
traits <- read_sav("person.sav")

# Summarize traits
summary(traits)
methods(subset)
# Print out a subset
subset(traits, Extroversion > 40 & Agreeableness > 40)

# haven is already loaded

# Import SPSS data from the URL: work
work <- read_sav("http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/employee.sav")

# Display summary of work$GENDER
summary(work$GENDER)


# Convert work$GENDER to a factor
work$GENDER <- as_factor(work$GENDER)


# Display summary of work$GENDER again
summary(work$GENDER)

# Load the foreign package
# The foreign package offers a simple function to import and read STATA data: read.dta()
# The arguments you will use most often are convert.dates, convert.factors, missing.type and convert.underscore
library(foreign)

# Import florida.dta and name the resulting data frame florida
florida <- read.dta("florida.dta")

# Check tail() of florida
tail(florida)

# foreign is already loaded

# Specify the file path using file.path(): path
path <- file.path("worldbank", "edequality.dta")

# Create and print structure of edu_equal_1
edu_equal_1 <- read.dta(path)
str(edu_equal_1)

# Create and print structure of edu_equal_2
edu_equal_2 <- read.dta(path, convert.factors = FALSE)
str(edu_equal_2)

# Create and print structure of edu_equal_3
edu_equal_3 <- read.dta(path, convert.underscore = TRUE)
str(edu_equal_3)

# foreign is already loaded
# there's also read.spss() to read SPSS data files.
# To get a data frame, make sure to set to.data.frame = TRUE inside read.spss().
# Import international.sav as a data frame: demo
demo <- read.spss("international.sav", to.data.frame = TRUE)

# Create boxplot of gdp variable of demo
boxplot(demo$gdp)

# foreign is already loaded
# use.value.labels. It specifies whether variables with value labels should be converted into R factors with levels that are named accordingly.
# Import international.sav as demo_1
demo_1 <- read.spss("international.sav", to.data.frame = TRUE)

# Print out the head of demo_1
head(demo_1)

# Import international.sav as demo_2
demo_2 <- read.spss("international.sav", to.data.frame = TRUE, use.value.labels = FALSE)

# Print out the head of demo_2
head(demo_2)

